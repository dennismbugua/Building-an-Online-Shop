
# The whole checkout process will work as follows:

# 1 In the view, a client token is generated using the braintree Python module. This token is used in the next step to instantiate the Braintree JavaScript client; it's not the payment token nonce.
# 2 The view renders the checkout template. The template loads the Braintree JavaScript SDK using the client token and generates the iframe with the hosted payment form fields.
# 3 Users enter their credit card details and submit the form. A payment token nonce is generated with the Braintree JavaScript client. We send the token to our view with a POST request.
# 4 The payment view receives the token nonce and we use it to generate a transaction using the braintree Python module.

import braintree
from django.shortcuts import render, redirect, get_object_or_404 
from orders.models import Order 

# When a payment is successful, we will send an automatic email to our customers including the generated PDF invoice
from django.template.loader import render_to_string
from django.core.mail import EmailMessage
from django.conf import settings
import weasyprint
from io import BytesIO

def payment_process(request):
    order_id = request.session.get('order_id')
    order = get_object_or_404(Order, id=order_id)

    if request.method == 'POST':
        # retrieve nonce
        nonce = request.POST.get('payment_method_nonce', None)
        # create and submit transaction
        result = braintree.Transaction.sale({
            'amount': '{:.2f}'.format(order.get_total_cost()),
            'payment_method_nonce': nonce,
            'options': {
                'submit_for_settlement': True
            }
        })
        if result.is_success:
            # mark the order as paid
            order.paid = True
            # store the unique transaction id
            order.braintree_id = result.transaction.id
            order.save()
            
            # use the EmailMessage class provided by Django to create an email object. Then, we render the template into the html variable. We generate the PDF file from the rendered template and we output it to a BytesIO instance, which is an in-memory bytes buffer. Then, we attach the generated PDF file to the EmailMessage object using the attach() method, including the contents of the out buffer, and finally we send the email.
            # set up your SMTP settings in the settings.py file of the project to send emails.


            # create invoice e-mail
            subject = 'My Shop - Invoice no. {}'.format(order.id)
            message = 'Please, find attached the invoice for your recent purchase.'
            email = EmailMessage(subject,
                                 message,
                                 'admin@myshop.com',
                                 [order.email])

            # generate PDF
            html = render_to_string('orders/order/pdf.html', {'order': order})
            out = BytesIO()
            stylesheets=[weasyprint.CSS(settings.STATIC_ROOT + 'css/pdf.css')]
            weasyprint.HTML(string=html).write_pdf(out,
                                                   stylesheets=stylesheets)
            # attach PDF file
            email.attach('order_{}.pdf'.format(order.id),
                         out.getvalue(),
                         'application/pdf')
            # send e-mail
            email.send()

            return redirect('payment:done')
        else:
            return redirect('payment:canceled')
    else:
        # generate token 
        client_token = braintree.ClientToken.generate()
        return render(request, 
                      'payment/process.html', 
                      {'order': order,
                       'client_token': client_token})
    
    
# The payment_process view manages the checkout process. In this view, take the following actions:

# 1 We get the current order from the order_id session key, which was set previously in the order_create view.
# 2 We retrieve the Order object for the given ID or return a 404 Not Found error if not found.
# 3 When the view is loaded with a POST request, we retrieve the payment_method_nonce to generate a new transaction using braintree.Transaction.sale(). We pass the following parameters to it:
    # a) amount: The total amount to charge the customer.
    # b) payment_method_nonce: The token nonce generated by Braintree for the payment. It will be generated in the template using the Braintree JavaScript SDK.
    # c) options: We send the submit_for_settlement option with True so that the transaction is automatically submitted for settlement.
# 4 If the transaction is successfully processed, we mark the order as paid by setting its paid attribute to True and we store the unique transaction ID returned by the gateway in the braintree_id attribute. We redirect the user to the payment:done URL if the payment was successful otherwise to payment:canceled.
# 5 If the view was loaded with a GET request, we generate a client token that we will use in the template to instantiate the Braintree JavaScript client.

    
def payment_done(request):
    return render(request, 'payment/done.html')


def payment_canceled(request):
    return render(request, 'payment/canceled.html')
